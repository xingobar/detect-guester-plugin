module.exports.detect = (function() {
	var g = (positionY = newPositionX = newPositionY = 0),
		d = null,
		e = function(a) {
			a.off('mouseup');
			a.off('mousemove');
			a.off('touchstart');
			a.off('touchmove');
			g = positionY = newPositionX = newPositionY = 0;
			d = null;
		},
		f = function() {
			if (d)
				if (d.hasOwnProperty('callback'))
					if ('function' === typeof d.callback)
						try {
							d.callback();
						} catch (a) {
							throw Error(a.message);
						}
					else throw Error('param callback must be function');
				else throw Error('not set callback function');
		};
	return {
		swipe: function(a) {
			d = a;
			if (a.hasOwnProperty('target'))
				if ('string' === typeof a.target) {
					var b = $(a.target);
					b.on('mousedown touchstart', function(c) {
						c.preventDefault();
						g = c.clientX;
						positionY = c.clientY;
						b.on('mouseup touchend', function(a) {
							a.preventDefault();
							e(b);
						});
						b.on('mousemove touchmove', function(c) {
							c.preventDefault();
							newPositionX = g - c.clientX;
							newPositionY = positionY - c.clientY;
							c = Math.abs(newPositionX);
							var h = Math.abs(newPositionY);
							if (a.hasOwnProperty('direction'))
								if ('string' === typeof a.direction)
									switch (a.direction) {
										case 'left':
											0 < newPositionX && 100 <= c && (f(), e(b));
											break;
										case 'right':
											0 > newPositionX && 100 <= c && (f(), e(b));
											break;
										case 'top':
											0 < newPositionY && 100 <= h && (f(), e(b));
											break;
										case 'down':
											0 > newPositionY && 100 <= h && (f(), e(b));
									}
								else throw Error('params direction must be string');
							else throw Error('must be set direction params');
						});
					});
				} else throw Error('param target element must be string');
			else throw Error('no set target element');
		},
		press: function(a) {
			d = a;
			if (a.hasOwnProperty('target'))
				if ('string' === typeof a.target) {
					var b = $(a.target);
					b.on('mousedown touchstart', function(a) {
						a.preventDefault();
						f();
						b.on('mouseup touchend', function(a) {
							a.preventDefault();
							e(b);
						});
					});
				} else throw Error('param target must be string');
			else throw Error('no set target element');
		},
		longPress: function(a) {
			d = a;
			if (a.hasOwnProperty('target'))
				if ('string' === typeof a.target) {
					var b = $(a.target),
						c = 1500;
					if (a.hasOwnProperty('wait_time'))
						if ('integer' === typeof a.wait_time) c = a.wait_time;
						else throw Error('param wait time must be integer');
					b.on('mousedown touchstart', function(a) {
						a.preventDefault();
						setTimeout(function() {
							f();
						}, c);
						b.on('mouseup touchend', function(a) {
							a.preventDefault();
							e(b);
						});
					});
				} else throw Error('param target must be string');
			else throw Error('no set target element');
		},
		rotate: function(a) {
			d = a;
			if (d.hasOwnProperty('target'))
				if ('string' === typeof d.target) {
					var b = $(d.target);
					b.on('mousedown touchstart', function(a) {
						a.preventDefault();
						g = a.clientX;
						positionY = a.clientY;
						if (2 < a.touches.length) {
							var c = a.touches[0].clientY;
							g = a.touches[0].clientX;
							positionY = c;
						}
						b.on('mouseup touchend', function(a) {
							a.preventDefault();
							e(b);
						});
						b.on('mousemove touchmove', function(a) {
							a.preventDefault();
							newPositionX = a.clientX;
							newPositionY = a.clientY;
							if (2 < a.touches.length) {
								var c = a.touches[0].clientY;
								newPositionX = a.touches[0].clientX;
								newPositionY = c;
							}
							a = 180 * Math.atan2(newPositionY - positionY, newPositionX - g) / Math.PI;
							20 >= a && -20 <= a
								? (f(), e(b))
								: 110 >= a && 70 <= a ? (f(), e(b)) : 90 < a && 180 > a && (f(), e(b));
						});
					});
				} else throw Error('param target must be string');
			else throw Error('no set target element');
		}
	};
})();
