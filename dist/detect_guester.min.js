module.exports.detect = (function() {
	var g = (positionY = newPositionX = newPositionY = 0),
		d = null,
		h = function(b) {
			b.off('pointerup');
			b.off('pointermove');
		},
		e = function(b) {
			b.off('mouseup');
			b.off('mousemove');
			b.off('touchstart');
			b.off('touchmove');
			g = positionY = newPositionX = newPositionY = 0;
			d = null;
		},
		f = function() {
			if (d)
				if (d.hasOwnProperty('callback'))
					if ('function' === typeof d.callback)
						try {
							d.callback();
						} catch (b) {
							throw Error(b.message);
						}
					else throw Error('param callback must be function');
				else throw Error('not set callback function');
		};
	return {
		swipe: function(b) {
			d = b;
			if (b.hasOwnProperty('target'))
				if ('string' === typeof b.target) {
					var c = $(b.target);
					c.on('mousedown touchstart', function(a) {
						a.preventDefault();
						g = a.clientX;
						positionY = a.clientY;
						c.on('mouseup touchend', function(b) {
							b.preventDefault();
							e(c);
						});
						c.on('mousemove touchmove', function(a) {
							a.preventDefault();
							newPositionX = g - a.clientX;
							newPositionY = positionY - a.clientY;
							a = Math.abs(newPositionX);
							var k = Math.abs(newPositionY);
							if (b.hasOwnProperty('direction'))
								if ('string' === typeof b.direction)
									switch (b.direction) {
										case 'left':
											0 < newPositionX && 100 <= a && (f(), e(c));
											break;
										case 'right':
											0 > newPositionX && 100 <= a && (f(), e(c));
											break;
										case 'top':
											0 < newPositionY && 100 <= k && (f(), e(c));
											break;
										case 'down':
											0 > newPositionY && 100 <= k && (f(), e(c));
									}
								else throw Error('params direction must be string');
							else throw Error('must be set direction params');
						});
					});
				} else throw Error('param target element must be string');
			else throw Error('no set target element');
		},
		press: function(b) {
			d = b;
			if (b.hasOwnProperty('target'))
				if ('string' === typeof b.target) {
					var c = $(b.target);
					c.on('mousedown touchstart', function(a) {
						a.preventDefault();
						f();
						c.on('mouseup touchend', function(a) {
							a.preventDefault();
							e(c);
						});
					});
				} else throw Error('param target must be string');
			else throw Error('no set target element');
		},
		longPress: function(b) {
			d = b;
			if (b.hasOwnProperty('target'))
				if ('string' === typeof b.target) {
					var c = $(b.target),
						a = 1500;
					if (b.hasOwnProperty('wait_time'))
						if ('integer' === typeof b.wait_time) a = b.wait_time;
						else throw Error('param wait time must be integer');
					c.on('mousedown touchstart', function(b) {
						b.preventDefault();
						setTimeout(function() {
							f();
						}, a);
						c.on('mouseup touchend', function(a) {
							a.preventDefault();
							e(c);
						});
					});
				} else throw Error('param target must be string');
			else throw Error('no set target element');
		},
		rotate: function(b) {
			d = b;
			if (d.hasOwnProperty('target'))
				if ('string' === typeof d.target) {
					var c = $(d.target);
					c.on('mousedown touchstart', function(a) {
						a.preventDefault();
						g = a.clientX;
						positionY = a.clientY;
						if (a.touches instanceof Array && 2 < a.touches.length) {
							var b = a.touches[0].clientY;
							g = a.touches[0].clientX;
							positionY = b;
						}
						c.on('mouseup touchend', function(a) {
							a.preventDefault();
							e(c);
						});
						c.on('mousemove touchmove', function(a) {
							a.preventDefault();
							newPositionX = a.clientX;
							newPositionY = a.clientY;
							if (a.touches instanceof Array && 2 < a.touches.length) {
								var b = a.touches[0].clientY;
								newPositionX = a.touches[0].clientX;
								newPositionY = b;
							}
							a = 180 * Math.atan2(newPositionY - positionY, newPositionX - g) / Math.PI;
							20 >= a && -20 <= a
								? (f(), e(c))
								: 110 >= a && 70 <= a ? (f(), e(c)) : 90 < a && 180 > a && (f(), e(c));
						});
					});
				} else throw Error('param target must be string');
			else throw Error('no set target element');
		},
		zoom: function(b) {
			d = b;
			if (d.hasOwnProperty('target'))
				if ('string' === typeof d.target) {
					var c = $(d.target),
						a = [],
						e = -1;
					c.on('pointerdown', function(b) {
						a.push(b);
						2 === a.length && (e = Math.abs(a[0].clientX - a[1].clientX));
					});
					c.on('pointermove', function(b) {
						for (var d = 0; d < a.length; d++) a[d].pointerId === b.pointerId && (a[d] = b);
						2 === a.length &&
							((b = Math.abs(a[0].clientX - a[1].clientX)),
							(d = b - e),
							0 < d ? (f(), h(c)) : 0 > d && (f(), h(c)),
							(e = b));
					});
					c.on('pointerup', function(b) {
						for (var d = 0; d < a.length; d++)
							if (a[d].pointerId == b.pointerId) {
								a.splice(d, 1);
								break;
							}
						2 > a.length && (e = -1);
						0 == a.length && h(c);
					});
				} else throw Error('param target element must be string');
			else throw Error('no set target element');
		}
	};
})();
