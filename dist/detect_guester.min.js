module.exports.detect = (function() {
	var g = (positionY = newPositionX = newPositionY = 0),
		b = null,
		d = function(a) {
			a.off('mouseup');
			a.off('mousemove');
			a.off('touchstart');
			a.off('touchmove');
			g = positionY = newPositionX = newPositionY = 0;
			b = null;
		},
		e = function() {
			if (b)
				if (b.hasOwnProperty('callback'))
					if ('function' === typeof b.callback)
						try {
							b.callback();
						} catch (a) {
							throw Error(a.message);
						}
					else throw Error('param callback must be function');
				else throw Error('not set callback function');
		};
	return {
		swipe: function(a) {
			b = a;
			if (a.hasOwnProperty('target'))
				if ('string' === typeof a.target) {
					var c = $(a.target);
					c.on('mousedown touchstart', function(b) {
						b.preventDefault();
						g = b.clientX;
						positionY = b.clientY;
						c.on('mouseup touchend', function(a) {
							a.preventDefault();
							d(c);
						});
						c.on('mousemove touchmove', function(b) {
							b.preventDefault();
							newPositionX = g - b.clientX;
							newPositionY = positionY - b.clientY;
							b = Math.abs(newPositionX);
							var f = Math.abs(newPositionY);
							if (a.hasOwnProperty('direction'))
								if ('string' === typeof a.direction)
									switch (a.direction) {
										case 'left':
											0 < newPositionX && 100 <= b && (e(), d(c));
											break;
										case 'right':
											0 > newPositionX && 100 <= b && (e(), d(c));
											break;
										case 'top':
											0 < newPositionY && 100 <= f && (e(), d(c));
											break;
										case 'down':
											0 > newPositionY && 100 <= f && (e(), d(c));
									}
								else throw Error('params direction must be string');
							else throw Error('must be set direction params');
						});
					});
				} else throw Error('param target element must be string');
			else throw Error('no set target element');
		},
		press: function(a) {
			b = a;
			if (a.hasOwnProperty('target'))
				if ('string' === typeof a.target) {
					var c = $(a.target);
					c.on('mousedown touchstart', function(a) {
						a.preventDefault();
						e();
						c.on('mouseup touchend', function(a) {
							a.preventDefault();
							d(c);
						});
					});
				} else throw Error('param target must be string');
			else throw Error('no set target element');
		},
		longPress: function(a) {
			b = a;
			if (a.hasOwnProperty('target'))
				if ('string' === typeof a.target) {
					var c = $(a.target),
						f = 1500;
					if (a.hasOwnProperty('wait_time'))
						if ('integer' === typeof a.wait_time) f = a.wait_time;
						else throw Error('param wait time must be integer');
					c.on('mousedown touchstart', function(a) {
						a.preventDefault();
						setTimeout(function() {
							e();
						}, f);
						c.on('mouseup touchend', function(a) {
							a.preventDefault();
							d(c);
						});
					});
				} else throw Error('param target must be string');
			else throw Error('no set target element');
		}
	};
})();
